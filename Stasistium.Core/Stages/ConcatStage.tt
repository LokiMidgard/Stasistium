<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>

using Stasistium.Documents;
using System.Collections.Immutable; 
using System.Threading.Tasks;
using Stasistium.Stages;
using System;

namespace Stasistium.Stages
{

<#


int numberOfElements = 4;

for (int i = 1; i <= numberOfElements; i++)
{
    string classGenerics = string.Join(", ", Enumerable.Range(1,i).Select(x=> "TCache"+x) );
    string baseGenerics = string.Join(", ", Enumerable.Range(1,i).Select(x=> "T, TCache"+x) );
    string whereStatements = string.Join("\n        ", Enumerable.Range(1,i).Select(x=> "where TCache"+x+" : class") );

    string constructorArguments = string.Join(", ", Enumerable.Range(1,i).Select(x=> "StagePerformHandler<T, TCache"+x+"> input"+x) );
    string baseArguments = string.Join(", ", Enumerable.Range(1,i).Select(x=> "input"+x) );
    
    string overideArguments =string.Join(", ", Enumerable.Range(1,i).Select(x=> "IDocument<T> input"+x) );
    string toListArguments =string.Join(", ", Enumerable.Range(1,i).Select(x=> "input"+x) );

#>

    public class ConcatStage<T, <#=classGenerics#>> : GeneratedHelper.Multiple.Simple.OutputMultiSimpleInputSingle<#=i#>List0StageBase<<#=baseGenerics#>, T>
        <#=whereStatements#>
    {
        public ConcatStage(<#=constructorArguments#>, GeneratorContext context) : base(<#=baseArguments #>, context)
        {
        }

        protected override Task<ImmutableList<IDocument<T>>> Work(<#=overideArguments#>, OptionToken options)
        {
            return Task.FromResult(ImmutableList.Create(<#=toListArguments#>));
        }
    }


<#
             }

#>

}

namespace Stasistium
{


    public static partial class StageExtensions
    {
<#
for (int i = 1; i <= numberOfElements; i++)
{
    string classGenerics = string.Join(", ", Enumerable.Range(1,i).Select(x=> "TCache"+x) );
    string argumentList = string.Join(", ", Enumerable.Range(1,i).Select(x=> "StageBase<T, TCache"+x+"> input"+x) );
    string argumentList2 = string.Join(", ", Enumerable.Range(1,i).Select(x=> "input"+x+".DoIt") );
    string generics = string.Join(", ", Enumerable.Range(1,i).Select(x=> "TCache"+x) );
    
    string whereStatements = string.Join("\n            ", Enumerable.Range(1,i).Select(x=> "where TCache"+x+" : class") );
    string notNull = string.Join("\n            ", Enumerable.Range(1,i).Select(x=> "if(input"+x+" is null)\n                 throw new ArgumentNullException(nameof(input"+x+"));") );

#>
        public static ConcatStage<T, <#=classGenerics#>> Concat<T, <#=generics #>>(this <#=argumentList#>)
            <#=whereStatements#>
        {
            <#=notNull#>
            return new ConcatStage<T, <#=classGenerics#>>(<#=argumentList2 #>, input1.Context);
        }
<#
             }

#>
    }
}
